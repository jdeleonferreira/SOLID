#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

OPEN FOR EXTENSION AND CLOSED FOR MODIFICATION

#!csharp

using System;
using System.IO;
using System.Text;

public class Book {
    public string Author {get; private set;}
    public string Title {get; private set;}
    public double Price {get; private set;}

    public Book(string author, string title, double price ){
        this.Author = author;
        this.Title = title;
        this.Price  = price; 
    }

}

public class Invoice{
    public Book Book {get; private set;}
	public int Quantity {get; private set;}
	public double DiscountRate {get; private set;}
	public double TaxRate{get; private set;}
	public double Total {get; private set;}
    
    public Invoice(Book book, int quantity, double discountRate, double taxRate){
        this.Book = book;
        this.Quantity = quantity;
        this.DiscountRate = discountRate;
        this.TaxRate = taxRate;
    }

    //Se encarga de hacer los calculos totales de la Factura
    public double CalculateTotal(){
        double price = ((this.Book.Price - this.Book.Price * this.DiscountRate) * this.Quantity);

		double priceWithTaxes = price * (1 + this.TaxRate);
		return priceWithTaxes;
    }

}

public class  InvoicePrinter{
    private Invoice i;
    public InvoicePrinter(Invoice i){
        this.i = i;
    }

    public void PrintInvoice(){
        Console.WriteLine(this.i.Quantity + "x " + this.i.Book.Title + " " + this.i.Book.Price + "$");
        Console.WriteLine("Discount Rate: " + this.i.DiscountRate);
        Console.WriteLine("Tax Rate: " + this.i.TaxRate);
        Console.WriteLine("Total: " + this.i.Total);
    }
}

public interface IInvoicePersistence
{
    void Save(Invoice invoice);
}

public class FilePersistence : IInvoicePersistence{

    public FilePersistence(){}

    public void Save(Invoice invoice){
    string path= @"c:\temp\Invoice.txt";
        try{
        using(FileStream fs = File.Create(path)){
            byte[] line = new UTF8Encoding(true).GetBytes($"Book: {invoice.Book.Title}" );
            fs.Write(line, 0, line.Length);
            fs.Close();

        }
        }catch(Exception ex){
            Console.WriteLine(ex.Message);
        }
    }
}

public class DatabasePersistence : IInvoicePersistence{
    public DatabasePersistence(){}

    public void Save(Invoice invoice){
        throw new NotImplementedException();
    }
}

public class PersistenceManager{
    private readonly FilePersistence File;
    private readonly DatabasePersistence Database;

    public PersistenceManager(FilePersistence file, DatabasePersistence database){
        this.File = file;
        this.Database = database;
    }
}

var invoice = new Invoice(new Book("Book xyz", "Me", 12.35), 2, 0,10);
var printer = new InvoicePrinter(invoice);
var file = new FilePersistence();
var db = new DatabasePersistence();
invoice.CalculateTotal();
printer.PrintInvoice();
file.Save(invoice); 
db.Save(invoice);
